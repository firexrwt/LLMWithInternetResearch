import React, { useState, useEffect, useRef } from "react";
import Modal from "react-modal";
import { FiChevronDown } from "react-icons/fi";
import "./App.css";

Modal.setAppElement("#root");

function App() {
  const [query, setQuery] = useState("");
  const [chatHistory, setChatHistory] = useState([]);
  const [models, setModels] = useState([]);
  const [selectedModel, setSelectedModel] = useState("");
  const [useInternet, setUseInternet] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [isManageModalOpen, setIsManageModalOpen] = useState(false);
  const chatEndRef = useRef(null);

  // üìå –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    fetchModels();
  }, []);

  // üìå –°–∫—Ä–æ–ª–ª–∏–º –≤–Ω–∏–∑ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞
  useEffect(() => {
    if (chatEndRef.current) {
      chatEndRef.current.scrollIntoView({ behavior: "smooth" });
    }
  }, [chatHistory]);

  // üìå –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
  const fetchModels = async () => {
    try {
      const res = await fetch("http://127.0.0.1:9015/api/models");
      const data = await res.json();
      console.log("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏:", data); // üîç –õ–æ–≥–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π

      setModels(data);
      const installed = data.filter((m) => m.installed);

      if (installed.length > 0) {
        setSelectedModel(installed[0].name);
      } else {
        setSelectedModel(""); // –ï—Å–ª–∏ –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–µ–π:", error);
    }
  };

  // üìå –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!query.trim()) return;

    console.log("–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å:", selectedModel); // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –ª–∏ –º–æ–¥–µ–ª—å

    if (!selectedModel) {
      console.error("–û—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞!");
      setChatHistory((prev) => [...prev, { role: "assistant", text: "–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å!" }]);
      return;
    }

    setChatHistory([...chatHistory, { role: "user", text: query }]);
    setIsLoading(true);

    try {
      const res = await fetch("http://127.0.0.1:9015/api/query", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          text: query,
          model: selectedModel, // ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
          use_internet: useInternet
        }),
      });

      if (!res.ok) throw new Error(res.statusText);
      const data = await res.json();
      setChatHistory((prev) => [...prev, { role: "assistant", text: data.response }]);

    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error);
      setChatHistory((prev) => [
        ...prev,
        { role: "assistant", text: `–û—à–∏–±–∫–∞: ${error.message}` },
      ]);
    } finally {
      setIsLoading(false);
      setQuery("");
    }
  };

  // üìå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏
  const handleInstallModel = async (modelName) => {
    try {
      const res = await fetch("http://127.0.0.1:9015/api/install_model", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ model: modelName }),
      });
      if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏");
      fetchModels();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏:", error);
    }
  };

  // üìå –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
  const handleDeleteModel = async (modelName) => {
    alert(`–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ ${modelName} –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ.`);
  };

  return (
    <div className="app-container">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <header className="header">
        <h1 className="header-title">AI Assistant</h1>
        <button onClick={() => setIsManageModalOpen(true)} className="manage-models-button">
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—è–º–∏
        </button>
      </header>

      {/* –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ */}
      <div className="chat-container">
        {chatHistory.length > 0 ? (
          chatHistory.map((msg, index) => (
            <div
              key={index}
              className={`message ${msg.role === "user" ? "message-user" : "message-assistant"}`}
            >
              {msg.text}
            </div>
          ))
        ) : (
          <p style={{ textAlign: "center", color: "#777" }}>–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</p>
        )}
        <div ref={chatEndRef} />
      </div>

      {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å –≤—ã–ø–∞–¥–∞—é—â–∏–º —Å–ø–∏—Å–∫–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π */}
      <div className="input-container">
        <select
          value={selectedModel}
          onChange={(e) => {
            console.log("–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å:", e.target.value); // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –ª–∏ –º–æ–¥–µ–ª—å
            setSelectedModel(e.target.value);
          }}
          className="model-selector"
        >
          <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å</option>
          {models.filter((m) => m.installed).map((model) => (
            <option key={model.name} value={model.name}>
              {model.name}
            </option>
          ))}
        </select>
        <textarea
          value={query}
          onChange={(e) => setQuery(e.target.value)}
          placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å..."
          className="input-field"
          rows="2"
          disabled={isLoading}
        />
        <button type="submit" onClick={handleSubmit} disabled={isLoading} className="send-button">
          {isLoading ? "..." : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"}
        </button>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª—è–º–∏ */}
      <Modal
        isOpen={isManageModalOpen}
        onRequestClose={() => setIsManageModalOpen(false)}
        className="modal"
        overlayClassName="modal-overlay"
      >
        <h2>–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏</h2>
        <div className="modal-content">
          {models.length > 0 ? (
            <ul className="model-list">
              {models.map((model) => (
                <li key={model.name} className="model-item">
                  <div className="model-info">
                    <strong>{model.name}</strong>
                    <div className="model-details">
                      <span>–†–∞–∑–º–µ—Ä: {model.size || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}</span>
                      <span>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {model.parameters || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}</span>
                    </div>
                  </div>
                  {model.installed ? (
                    <button onClick={() => handleDeleteModel(model.name)} className="model-action-button delete">
                      –£–¥–∞–ª–∏—Ç—å
                    </button>
                  ) : (
                    <button onClick={() => handleInstallModel(model.name)} className="model-action-button install">
                      –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                    </button>
                  )}
                </li>
              ))}
            </ul>
          ) : (
            <p>–ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...</p>
          )}
        </div>
        <button onClick={() => setIsManageModalOpen(false)} className="manage-models-button">
          –ó–∞–∫—Ä—ã—Ç—å
        </button>
      </Modal>
    </div>
  );
}

export default App;
